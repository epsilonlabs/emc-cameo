syntax = "proto3";
option java_multiple_files = true;

package org.eclipse.epsilon.emc.magicdraw.modelapi;

message ModelElement {
    string elementID = 1;
    string metamodelUri = 2;
    string typeName = 3;
}

message ModelElementTypeReference {
    string metamodelUri = 1;
    string typeName = 2;
}

message ModelElementType {
    string metamodelUri = 1;
    string typeName = 2;
    bool isAbstract = 3;
    repeated ModelElementTypeReference allSupertypes = 4;
}

message StringCollection {
    repeated string values = 1;
}

message DoubleCollection {
    repeated double values = 1;
}

message IntegerCollection {
    repeated sint64 values = 1;
}

message BooleanCollection {
    repeated bool values = 1;
}

message ModelElementCollection {
    repeated ModelElement values =  1;
}

message Value {
    oneof value {
        string stringValue = 1;
        double doubleValue = 2;
        sint64 longValue = 3;
        bool booleanValue = 4;
        ModelElement referenceValue = 5;

        StringCollection stringValues = 7;
        DoubleCollection doubleValues = 8;
        IntegerCollection longValues = 9;
        BooleanCollection booleanValues = 10;
        ModelElementCollection referenceValues = 11;

        bool notDefined = 12;
    }
}

message AllOfRequest {
    // If this is omitted, we ask for the entire contents of the model
    string typeName = 1;

    // Limits the scope of the request to the proper contents of this element
    string rootElementHyperlink = 2;

    // If true and a type is specified, only exact matches of this type are fetched
    bool onlyExactType = 3;
}

message GetFeatureValueRequest {
    string elementID = 1;
    string featureName = 2;
}

message GetTypeRequest {
    string typeName = 1;
}

message GetEnumerationValueRequest {
    string enumeration = 1;
    string label = 2;
}

message GetEnumerationValueResponse {
    string name = 1;
    sint32 value = 2;
    string literal = 3;
}

message GetElementByIDRequest {
    string elementID = 1;
}

message Empty {}

service ModelService {
    // gRPC lazily connects: we can use this as a "ping" to see if the server is available
    rpc ping(Empty) returns (Empty);

    rpc allOf(AllOfRequest) returns (ModelElementCollection);
    rpc getElementByID(GetElementByIDRequest) returns (ModelElement);
    rpc getEnumerationValue(GetEnumerationValueRequest) returns (GetEnumerationValueResponse);
    rpc getFeatureValue(GetFeatureValueRequest) returns (Value);
    rpc getType(GetTypeRequest) returns (ModelElementType);
}
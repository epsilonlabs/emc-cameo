syntax = "proto3";
option java_multiple_files = true;

package org.eclipse.epsilon.emc.magicdraw.modelapi;

// Entity types

message ModelElement {
    string elementID = 1;
    string metamodelUri = 2;
    string typeName = 3;
}

message ModelElementTypeReference {
    string metamodelUri = 1;
    string typeName = 2;
}

message ModelElementType {
    string metamodelUri = 1;
    string typeName = 2;
    bool isAbstract = 3;
    repeated ModelElementTypeReference allSupertypes = 4;
}

message StringCollection {
    repeated string values = 1;
}

message FloatCollection {
    repeated float values = 1;
}

message DoubleCollection {
    repeated double values = 1;
}

message SingleInteger {
    sint32 value = 1;
}

message IntegerCollection {
    repeated sint32 values = 1;
}

message LongCollection {
    repeated sint64 values = 1;
}

message BooleanCollection {
    repeated bool values = 1;
}

message ModelElementCollection {
    repeated ModelElement values =  1;
}

message EnumerationValue {
    string name = 1;
    sint32 value = 2;
    string literal = 3;
}

message EnumerationValueCollection {
    repeated EnumerationValue values = 1;
}

message ProxyList {
    string elementID = 1;
    string featureName = 2;
}

message Value {
    oneof value {
        string stringValue = 1;
        float floatValue = 2;
        double doubleValue = 3;
        sint32 byteValue = 4;
        sint32 shortValue = 5;
        sint32 integerValue = 6;
        sint64 longValue = 7;
        bool booleanValue = 8;
        ModelElement referenceValue = 9;
        EnumerationValue enumerationValue = 10;

        /*
         * These should only be used by a client to send values:
         * the server should only serve proxy lists.
         */
        StringCollection stringValues = 11;
        FloatCollection floatValues = 12;
        DoubleCollection doubleValues = 13;
        IntegerCollection byteValues = 14;
        IntegerCollection shortValues = 15;
        IntegerCollection integerValues = 16;
        LongCollection longValues = 17;
        BooleanCollection booleanValues = 18;
        ModelElementCollection referenceValues = 19;
        EnumerationValueCollection enumerationValues = 20;

        // The server will always send proxy lists for many-valued features
        ProxyList proxyList = 22;

        /*
         * There is no such feature defined for the given object:
         * this is different from the feature not being set (in which
         * case, we would send a Value with value left unset).
         */
        bool notDefined = 21;
    }
}

// Request types

message AllOfRequest {
    // If this is omitted, we ask for the entire contents of the model
    string typeName = 1;

    // Limits the scope of the request to the proper contents of this element
    string rootElementHyperlink = 2;

    // If true and a type is specified, only exact matches of this type are fetched
    bool onlyExactType = 3;
}

message GetFeatureValueRequest {
    string elementID = 1;
    string featureName = 2;
}

message GetTypeRequest {
    string typeName = 1;
}

message GetEnumerationValueRequest {
    string enumeration = 1;
    string label = 2;
}

message GetElementByIDRequest {
    string elementID = 1;
}

message Empty {}

message CreateInstanceRequest {
    string typeName = 1;

    // If specified, the model element will be added to the package referenced from here
    // (right-click on the package in MagicDraw / Cameo and select "Copy Element Hyperlink")
    string rootElementHyperlink = 2;
}

message DeleteInstanceRequest {
    string elementID = 1;
}

message OpenSessionRequest {
    string description = 1;
}

message SetFeatureValueRequest {
    string elementID = 1;
    string featureName = 2;
    Value newValue = 3;
}

message ListPosition {
    ProxyList list = 1;
    uint32 position = 2;
}

message ListPositionValue {
    ProxyList list = 1;
    uint32 position = 2;
    Value value = 3;
}

message ProjectLocation {
    // URL to the .mdzip file to be opened
    string fileURL = 1;
}

// Main service

service ModelService {
    // gRPC lazily connects: we can use this as a "ping" to see if the server is available
    rpc ping(Empty) returns (Empty);

    // read API
    rpc allOf(AllOfRequest) returns (ModelElementCollection);
    rpc getElementByID(GetElementByIDRequest) returns (ModelElement);
    rpc getEnumerationValue(GetEnumerationValueRequest) returns (EnumerationValue);
    rpc getFeatureValue(GetFeatureValueRequest) returns (Value);
    rpc getType(GetTypeRequest) returns (ModelElementType);

    // session API
    rpc openSession(OpenSessionRequest) returns (Empty);
    rpc closeSession(Empty) returns (Empty);
    rpc cancelSession(Empty) returns (Empty);

    // write API
    rpc createInstance(CreateInstanceRequest) returns (ModelElement);
    rpc deleteInstance(DeleteInstanceRequest) returns (Empty);
    rpc setFeatureValue(SetFeatureValueRequest) returns (Empty);

    // proxy list API
    rpc listSize(ProxyList) returns (SingleInteger);
    rpc listGet(ListPosition) returns (Value);
    rpc listSet(ListPositionValue) returns (Value);
    rpc listAdd(ListPositionValue) returns (Empty);
    rpc listRemove(ListPosition) returns (Value);
    rpc listMoveObject(ListPositionValue) returns (Empty);
    rpc listClear(ProxyList) returns (Empty);

    // project management API
    rpc openProject(ProjectLocation) returns (Empty);
    rpc closeProject(Empty) returns (Empty);
    rpc saveProject(Empty) returns (Empty);
}
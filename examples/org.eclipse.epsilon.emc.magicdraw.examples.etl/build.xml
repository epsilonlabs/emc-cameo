<?xml version="1.0" encoding="UTF-8"?>
<project default="run-eclipse">

	<!-- This takes advantage of the magicdraw.remote plugin defining 'MagicDrawRemote' as a model type -->
	<target name="run-eclipse">
        <epsilon.emf.loadModel name="Tree" metamodelfile="Tree.ecore" modelfile="tree.model"/>
		<epsilon.loadModel type="MagicDrawRemote" name="MagicDraw">
			<!-- For the full list of available parameters, check the PROPERTY_* keys in MagicDrawModel and all its superclasses -->
			<parameter name="storeOnDisposal" value="true"/>
		</epsilon.loadModel>

		<epsilon.etl src="tree2Classes.etl">
			<model ref="Tree"/>
			<model ref="MagicDraw"/>
		</epsilon.etl>

		<epsilon.disposeModel model="Tree"/>
		<epsilon.disposeModel model="MagicDraw"/>
    </target>

	<!--
	  This is for running outside of Eclipse, using the self-contained Ant distribution.
	  The 'impl' attribute with the exact name of the class is needed.	  

	  You will also need to ensure that Ant's classpath includes the lib/ folder of the
	  unpackaged "-ant.zip" distribution of this driver, by invoking it as:
	  
	  ant -lib /path/to/antdist/lib run-standalone

	  If you do have access to Github Packages (i.e. you are not behind a corporate
	  firewall), it may be easiest to use Maven / Gradle / Ant+IvyDE to automatically
	  fetch any dependencies. You can use the Epsilon standalone workflow example as
	  a reference:

	  https://git.eclipse.org/c/epsilon/org.eclipse.epsilon.git/tree/examples/org.eclipse.epsilon.examples.workflow.standalone
	 -->
	<target name="run-standalone">
        <taskdef resource="org/eclipse/epsilon/workflow/tasks/tasks.xml"/>
        <taskdef resource="org/eclipse/epsilon/workflow/tasks/emf/tasks.xml"/>
		
        <epsilon.emf.loadModel name="Tree" metamodelfile="Tree.ecore" modelfile="tree.model"/>
		<epsilon.loadModel type="MagicDrawRemote" name="MagicDraw" impl="org.eclipse.epsilon.emc.magicdraw.remote.MagicDrawModel">
			<!-- For the full list of available parameters, check the PROPERTY_* keys in MagicDrawModel and all its superclasses -->
			<parameter name="storeOnDisposal" value="true"/>
		</epsilon.loadModel>

		<epsilon.etl src="tree2Classes.etl">
			<model ref="Tree"/>
			<model ref="MagicDraw"/>
		</epsilon.etl>

		<epsilon.disposeModel model="Tree"/>
		<epsilon.disposeModel model="MagicDraw"/>
    </target>
	
</project>
